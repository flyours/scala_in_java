package com.jeff.scala.drills

import java.util.Date

import scala.reflect.ClassTag

/**
  * Type erasures & manifests
  * As we know, type information is lost at compile time due to erasure.
  * Scala features Manifests, allowing us to selectively recover type information.
  * Manifests are provided as an implicit value, generated by the compiler as needed.
  */
class MakeFoo[A](implicit manifest: Manifest[A]) {
    def make: A = manifest.runtimeClass.newInstance.asInstanceOf[A]
}
object Manifest extends App{
    //default constructor will be invoked
    println( new MakeFoo[String].make)
    println( new MakeFoo[Date].make)

    //ClassManifest has been deprecated by ClassTag
    def first[A : ClassTag](x : Array[A]) = Array(x.head)

    val first1 = first(Array(1, 2))
    println(first1.toList)
}
